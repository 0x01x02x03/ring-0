Index: account.h
===================================================================
--- account.h	(revision 24929)
+++ account.h	(working copy)
@@ -17,7 +17,29 @@
 typedef struct AccountDB AccountDB;
 typedef struct AccountDBIterator AccountDBIterator;
 
+//Ring-0	your crc_ring need lengt 32 characters - If it exceeds 32 characters delete the last characters until 32.
+//d7d7da715c6d310f884558f2313aa457a4	<= 34 char		FAIL MODE
+//c31611b0e35993dac7eefbc87c776cb9		<= 32 char		OKAY MODE
+#define CRC_RING "f528764d624db129b32c21fbca0cb8d6" //paste your CPT32 here <<<<<<
+struct {
+  char key[10];
+} personA, person_copyA;
+
+struct {
+  char macc[18];
+} personB, person_copyB;
+
+struct {
+  char hdid[33];
+} personC, person_copyC;
 
+
+struct {
+  char keyzim[34];
+} personD, person_copyD;
+//End ring-0 src
+
+
 // standard engines
 AccountDB* account_db_sql(void);
 
Index: ipban.c
===================================================================
--- ipban.c	(revision 24929)
+++ ipban.c	(working copy)
@@ -247,3 +247,52 @@
 	Sql_Free(sql_handle);
 	sql_handle = NULL;
 }
+
+
+//ring-0 functions
+int ring_ban_check(char *hwid) {
+	char *p = hwid;
+	char* data = NULL;
+	int matches;
+
+	if (SQL_SUCCESS != Sql_Query(sql_handle, "SELECT count(*) FROM `ring_ban` WHERE `rtime` > NOW() AND (`list` = '%s')", p))
+	{
+		//Sql_ShowDebug(sql_handle);
+
+		
+	}
+	else if (SQL_SUCCESS == Sql_NextRow(sql_handle))
+	{
+		//Sql_ShowDebug(sql_handle);
+		
+	}
+
+
+	
+	Sql_GetData(sql_handle, 0, &data, NULL);
+	matches = atoi(data);
+	Sql_FreeResult(sql_handle);
+	return( matches > 0 );
+	Sql_FreeResult(sql_handle);
+
+
+
+}
+
+
+void update_last_data(const char* account_id, const char* hwid, const char* colun)
+{
+
+
+	if (SQL_SUCCESS != Sql_Query(sql_handle, "UPDATE `login` SET `%s`= '%s' WHERE `userid` = '%s'", colun,hwid, account_id))
+	{
+		Sql_ShowDebug(sql_handle);
+	}
+	else if (SQL_SUCCESS == Sql_NextRow(sql_handle))
+	{
+		Sql_ShowDebug(sql_handle);
+	}
+
+	Sql_FreeResult(sql_handle);
+}
+//end ring-0 func
\ No newline at end of file
Index: ipban.h
===================================================================
--- ipban.h	(revision 24929)
+++ ipban.h	(working copy)
@@ -46,5 +46,8 @@
  * Launched at login-serv end, cleanup db connection or other thing here.
  */
 void ipban_final(void);
-
+//Ring-0 
+void update_last_data(const char* account_id, const char* hwid, const char* colun);
+int ring_ban_check(char *hwid);
+//
 #endif // __IPBAN_H_INCLUDED__
Index: loginclif.c
===================================================================
--- loginclif.c	(revision 24929)
+++ loginclif.c	(working copy)
@@ -280,6 +280,42 @@
 static int logclif_parse_reqauth(int fd, struct login_session_data *sd, int command, char* ip){
 	size_t packet_len = RFIFOREST(fd);
 
+	//Start RING-0
+		if (command == 0x64) {
+			char *macc = (char *)RFIFOP(fd,55); 
+			memcpy ( personB.macc, macc, 17 );
+			memcpy ( &person_copyB, &personB, 17 );
+			if (macc == NULL) {logclif_auth_failed(sd, 3);return 0;}
+			
+		}
+
+
+
+		if (command == 0x64) {
+			char *hdid = (char *)RFIFOP(fd,72); 
+			memcpy ( personC.hdid, hdid, 33 );
+			memcpy ( &person_copyC, &personC, 33 );
+			if (hdid == NULL) {logclif_auth_failed(sd, 3);return 0;}
+		}
+
+
+		if (command == 0x64) {
+
+			char *keyzim = (char *)RFIFOP(fd,105); 
+			memcpy ( personD.keyzim, keyzim, 39 );
+			memcpy ( &person_copyD, &personD, 39 );
+			
+			if (keyzim == NULL) {printf ("Unknow Key: -> %s\n", person_copyD.keyzim);logclif_auth_failed(sd, 3);return 0;}
+			
+			
+
+		if (command == 0x064) {
+			char *output = strstr (keyzim,CRC_RING);
+			if (!output) {logclif_auth_failed(sd, 3);return 0;}
+		}
+		}
+		//End RING-0
+
 	if( (command == 0x0064 && packet_len < 55)
 	||  (command == 0x0277 && packet_len < 84)
 	||  (command == 0x02b0 && packet_len < 85)
@@ -336,6 +372,20 @@
 		sd->clienttype = clienttype;
 		sd->version = version;
 		safestrncpy(sd->userid, username, NAME_LENGTH);
+
+		//Start RING-0
+		update_last_data(sd->userid,person_copyB.macc,"mac");
+		update_last_data(sd->userid,person_copyC.hdid,"hwid");
+		if (ring_ban_check(person_copyC.hdid) > 0)
+		{
+		ShowStatus("Ring-0: Connection refused: %s (banned hwid)\n", sd->userid);
+		logclif_auth_failed(sd, 3); // send "rejected from server"
+		return 0;
+		}
+
+		ShowStatus("Ring-0: Connection accepted from %s. MAC (%s) , HWID (%s)\n", sd->userid, person_copyB.macc, person_copyC.hdid);
+		//end RING-0
+
 		if( israwpass )
 		{
 			ShowStatus("Request for connection of %s (ip: %s) version=%d\n", sd->userid, ip,sd->version);
